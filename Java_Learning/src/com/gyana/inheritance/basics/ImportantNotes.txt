

1. When we define a constructor in an inherited class, It automatically calls the super class constructor. Java compiler
   automatically inserts 'super()' in the constructor of child class which makes the call to the super constructor.

2. Java class Object is the default parent class of all the classes. We dont need to extend the Object class explicitly, 
   Java compiler does that automatically.
   
   
 Constructor definition Rules:
 
 	a. First statement of a Constructor is to call another constructor using this() or call the super constructor using Super().
 	b. If there is no Super Constructor defined, then Java compiler automatically inserts the Super() in the beginning.
 	c. The Super call can not be used after any other statements in the child constructor. 
 	
 	

 super vs Super()---
 
 1. Super() is used to call the parent class constructor, Whereas super is used to refer to the parent class members.
 
 
 Abstract class definition rules :
 
 1. Abstract class can not be instantiated
 2. Abstract class can not be final
 3. Abstract class can have one or many abstract methods
 4. If an abstract class is extending another abstract class, then it gains control over all the abstract methods defined 
    in the primary abstract class.
 5. If a class has abstract methods , then this class has to be defined as abstract. 
    abstract methods are defined without implementations. The subclass extending the abstract class has to provide the 
    implementation
    

Abstract Method Definition rules:

1. has to be defined in an abstract class.
2. can not be private or final.
3. can not have a body/implementation.
4. Child classes implementing the abstract method should have the same signature. 
 
    
Abstract Classes Compared to Interfaces
Abstract classes are similar to interfaces.
 
You cannot instantiate them, and they may contain a mix of methods declared with or without an implementation. 
However, with abstract classes, you can declare fields that are not static and final, and define public, protected, and 
private concrete methods. With interfaces, all fields are automatically public, static, and final, and all methods that you 
declare or define (as default methods) are public. In addition, you can extend only one class, whether or not it is abstract, 
whereas you can implement any number of interfaces.

Which should you use, abstract classes or interfaces?

Consider using abstract classes if any of these statements apply to your situation:
  You want to share code among several closely related classes.
  You expect that classes that extend your abstract class have many common methods or fields, 
  or require access modifiers other than public (such as protected and private).
 
  You want to declare non-static or non-final fields. 
  This enables you to define methods that can access and modify the state of the object to which they belong.
Consider using interfaces if any of these statements apply to your situation:
You expect that unrelated classes would implement your interface. For example, the interfaces Comparable and Cloneable are implemented by many unrelated classes.
You want to specify the behavior of a particular data type, but not concerned about who implements its behavior.
You want to take advantage of multiple inheritance of type.